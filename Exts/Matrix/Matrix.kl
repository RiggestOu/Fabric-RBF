require MathUtils;
require JSON;

// TODO: 
//   -add a constructor with 2D array
//   -need to convert the polar decomposition code
//   -need to add a Strassen Multiply for large matrices

object Matrix{
    UInt32 rows; // X
    UInt32 cols; // Y
    Float32 matrix[];
    Matrix lu;
    Boolean transposed;
    Boolean singular;
    Boolean even;
};

inline Matrix()
{}

inline Matrix(UInt32 dim)
{
    this.cols = dim;
    this.rows = dim;
    this.matrix.resize(dim * dim);
}

inline Matrix(UInt32 row, UInt32 col)
{
    if (col == 0 || row == 0)
        throw("matrix size can't be zero");
    this.cols = col;
    this.rows = row;
    this.matrix.resize(row * col);
}

function Matrix.toJSON()
{
    JSONDictValue data();

    JSONNumberValue rows(this.rows);
    data.set("rows", rows);
    JSONNumberValue cols(this.cols);
    data.set("cols", cols);

    JSONBooleanValue transposed(this.transposed);
    data.set("transposed", transposed);
    JSONBooleanValue singular(this.singular);
    data.set("singular", singular);
    JSONBooleanValue even(this.even);
    data.set("even", even);

    JSONArrayValue matrix();
    matrix.resize(this.matrix.size());
    for (Index i = 0; i < this.matrix.size(); i++)
        matrix.setScalar(i, this.matrix[i]);
    data.set("matrix", matrix);
}

function Matrix.fromJSON!(JSONDictValue matrixData)
{
    if (matrixData.has("rows")) {
        this.rows = matrixData.getInteger('rows');
    }
    if (matrixData.has("cols")) {
        this.cols = matrixData.getInteger('cols');
    }
    if (matrixData.has("transposed")) {
        this.transposed = matrixData.getBoolean('transposed');
    }
    if (matrixData.has("singular")) {
        this.singular = matrixData.getBoolean('singular');
    }
    if (matrixData.has("even")) {
        this.even = matrixData.getBoolean('even');
    }
    if (matrixData.has("matrix")) {
        JSONArrayValue matrix = matrixData.get("matrix");
        this.matrix.resize(matrix.size());
        for (Index i = 0; i < matrix.size(); i++)
            this.matrix[i] = matrix.getScalar(i);
    }
}

inline Matrix(Float32 array[][])
{
    // TODO
}

inline Matrix Matrix.copy ? ()
{
    Matrix m(this.cols, this.rows);
    m.transposed = this.transposed;
    m.matrix = this.matrix.clone();
    return m;
}

inline Matrix.transpose!()
{
    this.transposed = !this.transposed;
    UInt32 temp = this.rows;
    this.rows = this.cols;
    this.cols = temp;
}

inline UInt32 Matrix.getID(UInt32 row, UInt32 col)
{
    if (col < this.cols && row < this.rows)
        if (this.transposed)
            return this.rows * col + row;
        else
            return this.cols * row + col;
    else
        throw "index out of bound";
}

inline UInt32 Matrix.getColFromIndex(UInt32 index)
{
    if (index < this.matrix.size())
        return index % this.cols;
    else
        throw "index out of bound";
}

inline UInt32 Matrix.getRowFromIndex(UInt32 index)
{
    if (index < this.matrix.size())
        return (index + 1 - this.getColFromIndex(index)) / this.cols;
    else
        throw "index out of bound";
}

inline Matrix.set!(UInt32 row, UInt32 col, Float32 v)
{
    this.matrix[this.getID(row, col)] = v;
}

inline Float32 Matrix.get(UInt32 row, UInt32 col)
{
    return this.matrix[this.getID(row, col)];
}

function Float32[] Matrix.getRow(UInt32 row)
{
    if (row < this.rows)
    {
        Float32 nRow[];
        nRow.resize(this.cols);
        for (UInt32 i; i < this.cols; i++)
            nRow[i] = this.get(row, i);
        return nRow;
    }
    else
    {
        throw "index out of bound";
    }
}

function Float32[] Matrix.getRowsMin()
{
    Float32 minimums[];
    minimums.resize(this.rows);
    for (UInt32 i; i < this.rows; i++)
        minimums[i] = this.getRow(i).minimum();
    return minimums;
}

function Float32[] Matrix.getColsMin()
{
    Float32 minimums[];
    minimums.resize(this.cols);
    for (UInt32 i; i < this.cols; i++)
        minimums[i] = this.getCol(i).minimum();
    return minimums;
}

function Float32[] Matrix.getRowsMax()
{
    Float32 maximums[];
    maximums.resize(this.rows);
    for (UInt32 i; i < this.rows; i++)
        maximums[i] = this.getRow(i).maximum();
    return maximums;
}

function Float32[] Matrix.getColsMax()
{
    Float32 maximums[];
    maximums.resize(this.cols);
    for (UInt32 i; i < this.cols; i++)
        maximums[i] = this.getCol(i).maximum();
    return maximums;
}

inline  Matrix.setRow!(UInt32 y, Float32 row[])
{
    if (y < this.rows && row.size() == this.cols)
    {
        for (UInt32 i; i < this.cols; i++)
            this.matrix[this.getID(y, i)] = row[i];
    }
    else
    {
        throw "index " + y + " out of bound";
    }
}

inline Float32[] Matrix.getCol(UInt32 col)
{
    if (col < this.cols)
    {
        Float32 column[];
        column.resize(this.rows);
        for (UInt32 i; i < this.rows; i++)
            column[i] = this.get(i, col);
        return column;
    }
    else
    {
        throw "index out of bound";
    }
}

inline Matrix.setCol!(Float32 x, Float32 column[])
{
    if (x < this.cols && column.size() == this.rows)
    {
        for (UInt32 i; i < this.rows; i++)
            this.matrix[this.getID(i, x)] = column[i];
    }
    else
    {
        throw "index out of bound";
    }
}

inline Matrix.pushRow!(Float32 row[])
{
    this.rows += 1;
    UInt32 originalSize = this.matrix.size();
    this.matrix.resize(row.size());
    for (UInt32 i ; i < row.size(); i++)
        this.matrix[this.getID(this.rows - 1, i)] = row[i];
}

inline Matrix.pushCol!(Float32 col[])
{
    this.cols += 1;
    UInt32 originalSize = this.matrix.size();
    this.matrix.resize(col.size());
    for (UInt32 i ; i < col.size(); i++)
        this.matrix[this.getID(i, this.cols - 1)] = col[i];
}

inline Float32[] Matrix.popRow!()
{
    this.rows -= 1;
    Float32 row[] = this.matrix.getTail(this.cols);
    this.matrix.resize(this.rows * this.cols);
    return row;
}

inline Float32[] Matrix.popCol!()
{
    UInt32 offset;
    Float32 col[];
    col.resize(this.rows);

    for (UInt32 i = this.cols - 1 ; i < this.matrix.size(); i++)
    {
        UInt32 index = this.getID(offset, this.cols - 1);
        if (i - index == 0)
            col[offset++] = this.matrix[index];

        if (i + offset < this.matrix.size())
            this.matrix[i] = this.matrix[i + offset];
    }
    this.cols -= 1;
    this.matrix.resize(this.rows * this.cols);
    return col;
}

// still wip
/*
inline Matrix.addRow!(UInt32 y, Float32 row[])
{
    this.rows += 1;
    this.matrix.resize(row.size());
    this.matrix[this.getID(row, col)] = v;
}

inline Matrix.addCol!(UInt32 x, Float32 col[])
{
    this.cols += 1;
    this.matrix.resize(col.size());
    this.matrix[this.getID(row, col)] = v;
}

inline Float32[] Matrix.removeRow!(UInt32 y)
{
    this.rows -= 1;
    this.matrix[this.getID(row, col)] = v;
    return 0;
}

inline Float32[] Matrix.removeCol!(UInt32 x)
{
    UInt32 offset;
    Float32 col[];
    col.resize(this.rows);
    for (UInt32 i = 0 ; i < this.matrix.size() - (this.rows); i++)
    {
        UInt32 limit = Math_min(offset, this.rows - 1);
        //UInt32 index = this.getID(limit, x ) - limit;
        UInt32 index = this.getID(limit, x );

        if (i == index)
            col[offset] = this.matrix[this.getID(offset++, x)];

        //report(i+ ', ' +offset+ ', ' +index);
        //if(i+offset < this.matrix.size())
        //this.matrix[i] = this.matrix[i+offset];
        //report(this.getColFromIndex(i + (this.rows * (offset>0?1:0))));
        //report((i%this.rows*this.cols) + (this.rows * (offset>0?1:0)));
        report(this.getColFromIndex(i) > x ?  this.getColFromIndex(i) + 1 : this.getColFromIndex(i));
        //this.matrix[this.getID(i%this.rows,)] = this.matrix[this.getID(i%this.rows, this.getColFromIndex(i + (this.rows * (offset>0?1:0))))];
    }
    this.cols -= 1;
    this.matrix.resize(this.rows * this.cols);
    return col;
}*/

inline Matrix *(Matrix a, Matrix b)
{
    Matrix result(a.rows, b.cols);
    Float32 product;
    if (b.rows != a.cols)
        throw "invalid matrices size";

    for (UInt32 i = 0; i < a.rows; i++) {
        for (UInt32 j = 0; j < b.cols; j++) {
            product = 0;
            for (UInt32 k = 0; k < a.cols; k++)
                product += a.get(i, k) * b.get(k, j);
            result.set(i, j, product);
        }
    }
    return result;
}

inline Matrix *(Matrix a, Float32 b[])
{
    Matrix result(a.rows, 1);
    Float32 product;
    if (b.size() != a.cols)
        throw "invalid matrices size";

    for (UInt32 i = 0; i < a.rows; i++)
    {
        product = 0;
        for (UInt32 j = 0; j < a.cols; j++)
            product += a.get(i, j) * b[j];
        result.set(i, 0, product);
    }
    return result;
}

inline Matrix *(Matrix a, Float32 b)
{
    Matrix result = a.copy();
    for (UInt32 i = 0; i < result.matrix.size(); i++)
        result.matrix[i] *= b;
    return result;
}

function Matrix Matrix.multiply(Matrix m)
{
    return (this * m);
}


function Matrix Matrix.multiply(Float32 m[])
{
    return (this * m);
}


function Matrix.swapRows!(UInt32 a, UInt32 b)
{
    for (UInt32 i; i < this.cols; i++)
        this.matrix.swap(a * this.cols + i, b * this.cols + i);
}

function Matrix.swapCols!(UInt32 a, UInt32 b)
{
    for (UInt32 i; i < this.rows; i++)
        this.matrix.swap(this.cols * i + a, this.cols * i + b);
}

function Matrix Matrix.inverse!()
{
    UInt32 piv[];
    piv.resize(this.cols);
    Matrix LU = this.luDecomposition(piv);
    Matrix inv(this.cols, this.cols);
    for (UInt32 i = 0; i < this.cols; i++)
    {
        Float32 b[];
        b.resize(this.cols);
        Float32 w[];
        w.resize(this.cols);
        b[i] = 1.0;
        LU.solveLU(piv, b, w);
        inv.setCol(i, w);
    }
    return inv;
}

// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Calculates the LUP-decomposition of a square matrix.
// The LUP-decomposition of a matrix A consists of three matrices L, U and
// P that satisfy: P*A = L*U. L is lower triangular (with unit
// diagonal terms), U is upper triangular and P is a permutation matrix. All
// matrices are m*m.</p>
// As shown by the presence of the P matrix, this decomposition is
// implemented using partial pivoting.
// This class is based on the class with similar name from the
// "http://math.nist.gov/javanumerics/jama/" library.
//
//   converted the java code to KL using a Matrix struct
//
// @see "http://mathworld.wolfram.com/LUDecomposition.html"
// @see "http://en.wikipedia.org/wiki/LU_decomposition"
// @since 2.0 (changed to concrete class in 3.0)

function Float32 Matrix.getDeterminant(UInt32 pivot[]) {
    if (this.singular)
        return 0;
    else
    {
        UInt32 m = pivot.size();
        Float32 determinant = this.even ? 1 : -1;
        for (UInt32 i = 0; i < m; i++)
            determinant *= this.lu.get(i, i);
        return determinant;
    }
}

function Matrix Matrix.luDecomposition!(io UInt32 pivot[]) {
    Float32 singularityThreshold = 0;
    if (this.cols != this.rows)
        throw "NonSquareMatrixException";

    Size m = this.cols;
    Matrix lu = this.copy();

    // Initialize permutation array and parity
    for (UInt32 row = 0; row < m; row++) {
        pivot[row] = row;
    }
    this.even = true;
    this.singular = false;

    // Loop over columns
    for (UInt32 col = 0; col < m; col++) {

        // upper
        for (UInt32 row = 0; row < col; row++) {
            Float32 luRow[] = lu.getRow(row);
            Float32 sum = luRow[col];
            for (UInt32 i = 0; i < row; i++) {
                sum -= luRow[i] * lu.get(i, col);
            }
            lu.set(row, col, sum);
        }

        // lower
        UInt32 max = col; // permutation row
        Float32 largest = -1e100;
        for (UInt32 row = col; row < m; row++) {
            Float32 luRow[] = lu.getRow(row);
            Float32 sum = luRow[col];
            for (UInt32 i = 0; i < col; i++) {
                sum -= luRow[i] * lu.get(i, col);
            }
            lu.set(row, col, sum);

            // maintain best permutation choice
            if (abs(sum) > largest) {
                largest = abs(sum);
                max = row;
            }
        }

        // Singularity check
        if (abs(lu.get(max, col)) < singularityThreshold) {
            throw ("The matrix is singular!");
        }

        // Pivot if necessary
        if (max != col) {
            lu.swapRows(max, col);
            pivot.swap(max, col);
            this.even = !this.even;
        }

        // Divide the lower elements by the "winning" diagonal elt.
        Float32 luDiag = lu.get(col, col);
        for (UInt32 row = col + 1; row < m; row++) {
            lu.matrix[row * m + col] = lu.get(row, col) / luDiag;
        }
    }
    this.lu = lu;
    return (lu);
}

function Matrix.solveLU(UInt32 pivot[], io Float32 b[], io Float32 x[]) {

    UInt32 m = pivot.size();
    if (this.cols != m)
        throw "DimensionMismatchException";
    if (this.singular)
        throw "SingularMatrixException";

    // Apply permutations to b
    for (UInt32 row = 0; row < m; row++)
        x[row] = b[pivot[row]];

    // Solve LY = b
    for (UInt32 col = 0; col < m; col++) {
        Float32 xCol = x[col];
        for (UInt32 i = col + 1; i < m; i++) {
            x[i] -= xCol * this.get(i, col);
        }
    }
    // Solve UX = Y
    for (Integer col = m - 1; col >= 0; col--) {
        x[col] /= this.get(col, col);
        Float32 xCol = x[col];
        for (UInt32 i = 0; i < col; i++) {
            x[i] -= xCol * this.get(i, col);
        }
    }
}

// svdcomp - SVD decomposition routine.
// Takes an mxn matrix a and decomposes it into udv, where u,v are
// left and right orthogonal transformation matrices, and d is a
// diagonal matrix of singular values.
//
// This routine is adapted from svdecomp.c in XLISP-STAT 2.1 which is
// code from Numerical Recipes adapted by Luke Tierney and David Betz.
//
//  converted the c code to KL using a Matrix struct
//
// Input:
//   u = mxn matrix to be decomposed
//   w = returns the vector of singular values of this
//   v = returns the right orthogonal transformation matrix

function UInt32 Matrix.svdDecomposition(io Matrix u, io Float32 w[], io Matrix v)
{
    UInt32 flag, i, its, j, jj, k, l, nm;
    Float32 c, f, h, s, x, y, z;
    Float32 anorm = 0.0, g = 0.0, scale = 0.0;
    Float32 rv1[];
    UInt32 m = this.rows; UInt32 n = this.cols;

    if (m < n)
    {
        report ("#rows must be > #cols");
        return 0;
    }

    rv1.resize(n);
    w.resize(n);
    u = this.copy();
    /* Householder reduction to bidiagonal form */
    for (i = 0; i < n; i++)
    {
        /* left-hand reduction */
        l = i + 1;
        rv1[i] = scale * g;
        g = s = scale = 0.0;
        if (i < m)
        {
            for (k = i; k < m; k++)
                scale += abs(u.matrix[this.getID(k, i)]);
            if (scale)
            {
                for (k = i; k < m; k++)
                {
                    u.matrix[k * m + i] /= scale;
                    s += (u.matrix[this.getID(k, i)] * u.matrix[this.getID(k, i)]);
                }
                f = u.matrix[this.getID(i, i)];
                g = -copysign(sqrt(s), f);
                h = f * g - s;
                u.matrix[this.getID(i, i)] = (f - g);
                if (i != n - 1)
                {
                    for (j = l; j < n; j++)
                    {
                        s = 0.0;
                        for (k = i; k < m; k++)
                            s += (u.matrix[this.getID(k, i)] * u.matrix[this.getID(k, j)]);
                        f = s / h;
                        for (k = i; k < m; k++)
                            u.matrix[this.getID(k, j)] += (f * u.matrix[this.getID(k, i)]);
                    }
                }
                for (k = i; k < m; k++)
                    u.matrix[this.getID(k, i)] = (u.matrix[this.getID(k, i)] * scale);
            }
        }
        w[i] = (scale * g);

        /* right-hand reduction */
        g = s = scale = 0.0;
        if (i < m && i != n - 1)
        {
            for (k = l; k < n; k++)
                scale += abs(u.matrix[this.getID(i, k)]);
            if (scale)
            {
                for (k = l; k < n; k++)
                {
                    u.matrix[this.getID(i, k)] = (u.matrix[this.getID(i, k)] / scale);
                    s += (u.matrix[this.getID(i, k)] * u.matrix[this.getID(i, k)]);
                }
                f = u.matrix[this.getID(i, l)];
                g = -copysign(sqrt(s), f);
                h = f * g - s;
                u.matrix[this.getID(i, l)] = (f - g);
                for (k = l; k < n; k++)
                    rv1[k] = u.matrix[this.getID(i, k)] / h;
                if (i != m - 1)
                {
                    for (j = l; j < m; j++)
                    {
                        s = 0.0;
                        for (k = l; k < n; k++)
                            s += (u.matrix[this.getID(j, k)] * u.matrix[this.getID(i, k)]);
                        for (k = l; k < n; k++)
                            u.matrix[this.getID(j, k)] += (s * rv1[k]);
                    }
                }
                for (k = l; k < n; k++)
                    u.matrix[this.getID(i, k)] = (u.matrix[this.getID(i, k)] * scale);
            }
        }
        anorm = Math_max(anorm, (abs(w[i]) + abs(rv1[i])));
    }

    /* accumulate the right-hand transformation */
    for (i = n - 1; i >= 0; i--)
    {
        if (i < n - 1)
        {
            if (g)
            {
                for (j = l; j < n; j++)
                    v.matrix[v.getID(j, i)] = ((u.matrix[this.getID(i, j)] / u.matrix[this.getID(i, l)]) / g);
                /* Float32 division to avoid underflow */
                for (j = l; j < n; j++)
                {
                    s = 0.0;
                    for (k = l; k < n; k++)
                        s += (u.matrix[this.getID(i, k)] * v.matrix[v.getID(k, j)]);
                    for (k = l; k < n; k++)
                        v.matrix[v.getID(k, j)] += (s * v.matrix[v.getID(k, i)]);
                }
            }
            for (j = l; j < n; j++)
                v.matrix[v.getID(i, j)] = v.matrix[v.getID(j, i)] = 0.0;
        }
        v.matrix[v.getID(i, i)] += 1.0;
        g = rv1[i];
        l = i;
    }

    /* accumulate the left-hand transformation */
    for (i = n - 1; i >= 0; i--)
    {
        l = i + 1;
        g = w[i];
        if (i < n - 1)
            for (j = l; j < n; j++)
                u.matrix[this.getID(i, j)] = 0.0;
        if (g)
        {
            g = 1.0 / g;
            if (i != n - 1)
            {
                for (j = l; j < n; j++)
                {
                    s = 0.0;
                    for (k = l; k < m; k++)
                        s += (u.matrix[this.getID(k, i)] * u.matrix[this.getID(k, j)]);
                    f = (s / u.matrix[this.getID(i, i)]) * g;
                    for (k = i; k < m; k++)
                        u.matrix[this.getID(k, j)] += (f * u.matrix[this.getID(k, i)]);
                }
            }
            for (j = i; j < m; j++)
                u.matrix[this.getID(j, i)] = (u.matrix[this.getID(j, i)] * g);
        }
        else
        {
            for (j = i; j < m; j++)
                u.matrix[this.getID(j, i)] = 0.0;
        }
        u.matrix[this.getID(i, i)] += 1;
    }

    /* diagonalize the bidiagonal form */
    for (k = n - 1; k >= 0; k--)
    {   /* loop over singular values */
        for (its = 0; its < 30; its++)
        {   /* loop over allowed iterations */
            flag = 1;
            for (l = k; l >= 0; l--)
            {   /* test for splitting */
                nm = l - 1;
                if (abs(rv1[l]) + anorm == anorm)
                {
                    flag = 0;
                    break;
                }
                if (abs(w[nm]) + anorm == anorm)
                    break;
            }
            if (flag)
            {
                c = 0.0;
                s = 1.0;
                for (i = l; i <= k; i++)
                {
                    f = s * rv1[i];
                    if (abs(f) + anorm != anorm)
                    {
                        g = w[i];
                        h = pythag(f, g);
                        w[i] = h;
                        h = 1.0 / h;
                        c = g * h;
                        s = (- f * h);
                        for (j = 0; j < m; j++)
                        {
                            y = u.matrix[this.getID(j, nm)];
                            z = u.matrix[this.getID(j, i)];
                            u.matrix[this.getID(j, nm)] = y * c + z * s;
                            u.matrix[this.getID(j, i)] = z * c - y * s;
                        }
                    }
                }
            }
            z = w[k];
            if (l == k)
            {   // convergence
                if (z < 0.0)
                {   // make singular value non negative
                    w[k] = -z;
                    for (j = 0; j < n; j++)
                        v.matrix[v.getID(j, k)] = -v.matrix[v.getID(j, k)];
                }
                break;
            }
            if (its >= 30) {
                report("No convergence after 30,000! iterations \n");
                return (0);
            }

            /* shift from bottom 2 x 2 minor */
            x = w[l];
            nm = k - 1;
            y = w[nm];
            g = rv1[nm];
            h = rv1[k];
            f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2.0 * h * y);
            g = pythag(f, 1.0);
            f = ((x - z) * (x + z) + h * ((y / (f + copysign(g, f))) - h)) / x;

            /* next QR transformation */
            c = s = 1.0;
            for (j = l; j <= nm; j++)
            {
                i = j + 1;
                g = rv1[i];
                y = w[i];
                h = s * g;
                g = c * g;
                z = pythag(f, h);
                rv1[j] = z;
                c = f / z;
                s = h / z;
                f = x * c + g * s;
                g = g * c - x * s;
                h = y * s;
                y = y * c;
                for (jj = 0; jj < n; jj++)
                {
                    x = v.matrix[v.getID(jj, j)];
                    z = v.matrix[v.getID(jj, i)];
                    v.matrix[v.getID(jj, j)] = (x * c + z * s);
                    v.matrix[v.getID(jj, i)] = (z * c - x * s);
                }
                z = pythag(f, h);
                w[j] = z;
                if (z)
                {
                    z = 1.0 / z;
                    c = f * z;
                    s = h * z;
                }
                f = (c * g) + (s * y);
                x = (c * y) - (s * g);
                for (jj = 0; jj < m; jj++)
                {
                    y = u.matrix[this.getID(jj, j)];
                    z = u.matrix[this.getID(jj, i)];
                    u.matrix[this.getID(jj, j)] = (y * c + z * s);
                    u.matrix[this.getID(jj, i)] = (z * c - y * s);
                }
            }
            rv1[l] = 0.0;
            rv1[k] = f;
            w[k] = x;
        }
    }

    for (i = 0; i < w.size(); i++)
        if (w[i] < DIVIDEPRECISION)
            w[i] = 0;

    //sort eigenvalues
    for (i = 0; i < n; i++)
        for (j = i - 1; j >= 0; j--)
            if (w[j] < w[i])
            {
                w.swap(i, j);
                u.swapCols(i, j);
                v.swapCols(i, j);
                i = j;
            }

    return 1;
}


/******* Polar Decomposition *******/
/* Polar Decomposition of 3x3 matrix in 4x4,
 * M = QS.  See Nicholas Higham and Robert S. Schreiber,
 * Fast Polar Decomposition of An Arbitrary Matrix,
 * Technical Report 88-942, October 1988,
 * Department of Computer Science, Cornell University.
 */
/*
function Float32 Matrix.polarDecomposition( Matrix M, io Matrix Q, io Matrix S, Float32 tolerance)
    {

        #define TOL 1.0e-6
        Matrix Mk, MadjTk, Ek;
        double det, M_one, M_inf, MadjT_one, MadjT_inf, E_one, gamma, g1, g2;
        int i, j;

        mat_tpose(Mk,=,M,3);
        M_one = norm_one(Mk);  M_inf = norm_inf(Mk);

        do
        {
            adjoint_transpose(Mk, MadjTk);
            det = vdot(Mk[0], MadjTk[0]);
            if (det==0.0)
            {
                do_rank2(Mk, MadjTk, Mk);
                break;
            }

            MadjT_one = norm_one(MadjTk);
            MadjT_inf = norm_inf(MadjTk);

            gamma = sqrt(sqrt((MadjT_one*MadjT_inf)/(M_one*M_inf))/fabs(det));
            g1 = gamma*0.5;
            g2 = 0.5/(gamma*det);
            matrixCopy(Ek,=,Mk,3);
            matBinop(Mk,=,g1*Mk,+,g2*MadjTk,3);
            mat_copy(Ek,-=,Mk,3);
            E_one = norm_one(Ek);
            M_one = norm_one(Mk);
            M_inf = norm_inf(Mk);

        } while(E_one>(M_one*TOL));

        mat_tpose(Q,=,Mk,3); mat_pad(Q);
        mat_mult(Mk, M, S);  mat_pad(S);

        for (i=0; i<3; i++)
            for (j=i; j<3; j++)
                S[i][j] = S[j][i] = 0.5*(S[i][j]+S[j][i]);
        return (det);
    }

function Float32 Matrix.polarDecomposition(Matrix M, io Matrix Q, io Matrix S)
{
    return this.polarDecomposition( M, Q, S, 1.0e-6)
}
*/
function String Matrix.getDesc()
{
    String desc = "\n";
    for (Integer row = 0; row < this.rows; row++)
        desc += this.getRow(row) + "\n";
    return (desc);
}

